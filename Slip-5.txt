#include <stdio.h>
#include <unistd.h>
int main() {
    if (fork() == 0) {  // Child process
        nice(5);  // Increase priority (lower priority value)
        printf("Child process: PID = %d, priority increased.\n", getpid());
    } else {  // Parent process
        printf("Parent process: PID = %d\n", getpid());
    }
    return 0;
}
(10 marks)\
#include <stdio.h>
int main() {
    int n, frames[10] = {-1}, pages[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int total_pages = sizeof(pages) / sizeof(pages[0]), page_faults = 0, index = 0;
   printf("Enter number of frames: ");
    scanf("%d", &n);
   for (int i = 0; i < total_pages; i++) {
        int found = 0;
        for (int j = 0; j < n; j++) {
            if (frames[j] == pages[i]) {
                found = 1;  // Page already in frame
                break;
            }
        }
       if (!found) {  // Page fault occurs
            frames[index] = pages[i];  // Replace oldest page (FIFO)
            index = (index + 1) % n;   // Update FIFO index
            page_faults++;
        }
       printf("Frames: ");
        for (int j = 0; j < n; j++)
            printf("%d ", frames[j] != -1 ? frames[j] : '-');
        printf("\n");
    }
   printf("Total page faults: %d\n", page_faults);
    return 0;
}
(20 marks)\
OR
#include <stdio.h>
#define P 3  // Number of processes
#define R 2  // Number of resource types
void calculateNeed(int max[P][R], int alloc[P][R], int need[P][R]) {
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            need[i][j] = max[i][j] - alloc[i][j];
}
void displayMatrix(const char* title, int matrix[P][R]) {
    printf("%s:\n", title);
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++)
            printf("%d ", matrix[i][j]);
        printf("\n");
    }
}
int main() {
    int alloc[P][R] = {0}, max[P][R] = {0}, available[R] = {7, 2}, need[P][R];
    int choice;
    while (1) {
        printf("\n1. Accept Allocation\n2. Display Allocation and Max\n3. Display Need\n4. Display Available\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter Allocation and Max matrices (3x2 each):\n");
                for (int i = 0; i < P; i++)
                    for (int j = 0; j < R; j++)
                        scanf("%d", &alloc[i][j]);
                for (int i = 0; i < P; i++)
                    for (int j = 0; j < R; j++)
                        scanf("%d", &max[i][j]);
                break;
            case 2:
                displayMatrix("Allocation Matrix", alloc);
                displayMatrix("Max Matrix", max);
                break;
            case 3:
                calculateNeed(max, alloc, need);
                displayMatrix("Need Matrix", need);
                break;
            case 4:
                printf("Available: ");
                for (int j = 0; j < R; j++)
                    printf("%d ", available[j]);
                printf("\n");
                break;
            case 5:
                return 0;  // Exit program
            default:
                printf("Invalid choice!\n");
        }
    }
}
(20 marks)\