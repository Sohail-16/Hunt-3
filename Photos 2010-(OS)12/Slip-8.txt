#include <stdio.h>
int main() {
    int p, r;
    printf("Enter number of processes and resources: ");
    scanf("%d %d", &p, &r);
   int alloc[p][r], max[p][r], need[p][r];
   printf("Enter allocation matrix:\n");
    for (int i = 0; i < p; i++)
        for (int j = 0; j < r; j++)
            scanf("%d", &alloc[i][j]);
   printf("Enter maximum matrix:\n");
    for (int i = 0; i < p; i++)
        for (int j = 0; j < r; j++)
            scanf("%d", &max[i][j]);
   printf("Need Matrix:\n");
    for (int i = 0; i < p; i++) {
        for (int j = 0; j < r; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
   return 0;
}
(10 marks)\

#include <stdio.h>
int findOptimal(int pages[], int frames[], int n, int index, int frame_size) {
    int farthest = index, frame_to_replace = -1;

    for (int i = 0; i < frame_size; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    frame_to_replace = i;
                }
                break;
            }
        }
        if (j == n) return i; // Replace frame not needed in future
    }
    return (frame_to_replace == -1) ? 0 : frame_to_replace; 
}
int main() {
    int frames[3], pages[] = {12, 15, 12, 18, 6, 8, 11, 12, 19, 12, 6, 8, 12, 15, 19, 8};
    int n = 16, page_faults = 0, frame_size = 3, count = 0;
    for (int i = 0; i < frame_size; i++) frames[i] = -1; // Initialize frames
    printf("Page Reference String:\n");
    for (int i = 0; i < n; i++) printf("%d ", pages[i]);
    printf("\n\nPage Scheduling:\n");
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            page_faults++;
            if (count < frame_size) {
                frames[count++] = pages[i]; // Fill empty frames
            } else {
                frames[findOptimal(pages, frames, n, i + 1, frame_size)] = pages[i];            }
        }
       printf("Step %2d: ", i + 1);
        for (int j = 0; j < frame_size; j++) printf("%d ", frames[j] == -1 ? '-' : frames[j]);
        printf("\n");
    }
   printf("\nTotal Page Faults = %d\n", page_faults);
    return 0;
}
(20 marks )\