#include<stdio.h>
#include<unistd.h>
int main()
{
	int i;
	printf("I am EXEC.c called by execvp() ");
	printf("\n");
	return 0;
}
(10 marks)\

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_PROCESSES 5
typedef struct {
    int id, arrival_time, burst_time, waiting_time, turnaround_time;
} Process;
void calculateTimes(Process p[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        if (current_time < p[i].arrival_time)
            current_time = p[i].arrival_time;
        p[i].waiting_time = current_time - p[i].arrival_time;
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
        current_time += p[i].burst_time + 2; // I/O waiting time
    }
}
void printGanttChart(Process p[], int n) {
    printf("\nGantt Chart: ");
    for (int i = 0; i < n; i++)
        printf("| P%d ", p[i].id);
    printf("|\n0");
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        current_time += p[i].burst_time + 2; // I/O waiting time
        printf("  %d", current_time);
    }
    printf("\n");
}
int main() {
    Process p[MAX_PROCESSES];
    int n;
    printf("Enter number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time and burst time for Process %d: ", p[i].id);
        scanf("%d %d", &p[i].arrival_time, &p[i].burst_time);
    }
    calculateTimes(p, n);
    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\t%d\n", p[i].id, p[i].arrival_time, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    printGanttChart(p, n);
    float avg_waiting = 0, avg_turnaround = 0;
    for (int i = 0; i < n; i++) {
        avg_waiting += p[i].waiting_time;
        avg_turnaround += p[i].turnaround_time;
    }
    printf("Average Waiting Time: %.2f\n", avg_waiting / n);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround / n);
    return 0;
}
(20 marks)\
OR
#include <stdio.h>
#include <stdlib.h>
#define N 3 // Size of the puzzle (3x3)
int manhattan(int puzzle[N][N], int goal[N][N]) {
    int dist = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (puzzle[i][j] != 0 && puzzle[i][j] != goal[i][j])
                dist++;
        }
    }
    return dist;
}
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void printPuzzle(int puzzle[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%d ", puzzle[i][j]);
        printf("\n");
    }
    printf("\n");
}
void astar(int initial[N][N], int goal[N][N]) {
    int x, y, newX, newY;
    int moves[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; 
    while (manhattan(initial, goal) != 0) {
        for (int i = 0; i < N; i++) // Find the blank tile (0)
            for (int j = 0; j < N; j++)
                if (initial[i][j] == 0) { x = i; y = j; }
        int bestMove = -1, bestHeuristic = 999;
        for (int i = 0; i < 4; i++) {
            newX = x + moves[i][0];
            newY = y + moves[i][1];
            if (newX >= 0 && newX < N && newY >= 0 && newY < N) {
                swap(&initial[x][y], &initial[newX][newY]);
                int h = manhattan(initial, goal);
                if (h < bestHeuristic) {
                    bestHeuristic = h;
                    bestMove = i;
                }
                swap(&initial[x][y], &initial[newX][newY]); // Undo move
            }
        }
        if (bestMove != -1) {
            newX = x + moves[bestMove][0];
            newY = y + moves[bestMove][1];
            swap(&initial[x][y], &initial[newX][newY]);
            printPuzzle(initial); // Print each move
        }
    }
    printf("Goal State Reached!\n");
}
int main() {
    int initial[N][N] = {{1, 2, 3}, {0, 4, 6}, {7, 5, 8}}; // Initial state
    int goal[N][N] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};   // Goal state
    astar(initial, goal);
    return 0;
}
(20 marks)\