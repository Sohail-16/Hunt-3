#include <stdio.h>
#include <unistd.h>
int main() {
    pid_t pid = fork();
  if (pid > 0) {
        printf("Parent process (PID: %d) is exiting...\n", getpid());
        sleep(2); // Ensure parent exits before child finishes
    } else if (pid == 0) {
        sleep(5); // Child sleeps for 5 seconds
        printf("Child process (PID: %d), new Parent PID: %d\n", getpid(), getppid());
    } else {
        printf("Fork failed.\n");
    }
  return 0;
}
(10 marks)\

#include <stdio.h>
struct Process {
    int id, arrival, burst, priority, waiting, turnaround;
};
void calculateTimes(struct Process p[], int n) {
    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        if (p[i].arrival > currentTime) 
            currentTime = p[i].arrival;
        p[i].waiting = currentTime - p[i].arrival;
        p[i].turnaround = p[i].waiting + p[i].burst;
        currentTime += p[i].burst + 2; // Fixed I/O time of 2 units
    }
}
void displayResults(struct Process p[], int n) {
    int totalWaiting = 0, totalTurnaround = 0;
    printf("P#\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        totalWaiting += p[i].waiting;
        totalTurnaround += p[i].turnaround;
        printf("P%d\t%d\t%d\n", p[i].id, p[i].waiting, p[i].turnaround);
    }
    printf("Avg Waiting: %.2f\n", (float)totalWaiting / n);
    printf("Avg Turnaround: %.2f\n", (float)totalTurnaround / n);
}
int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
   struct Process p[n];
   for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Arrival, Burst, Priority for P%d: ", p[i].id);
        scanf("%d %d %d", &p[i].arrival, &p[i].burst, &p[i].priority);
    }
   for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].priority > p[j + 1].priority) {
                struct Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
   calculateTimes(p, n);
    displayResults(p, n);
   return 0;
}
(20 marks)\