interface Operation {
    double area();
    double volume();
}
interface Constants {
    double PI = 3.142;
}
class Cylinder implements Operation, Constants {
    private double radius;
    private double height;
    public Cylinder(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }
    public double area() {
        return 2 * PI * radius * (radius + height);
    }
    public double volume() {
        return PI * radius * radius * height;
    }
    public void display() {
        System.out.println("Area: " + area());
        System.out.println("Volume: " + volume());
    }
}
public class Main {
    public static void main(String[] args) {
        Cylinder cylinder = new Cylinder(5, 10);
       cylinder.display();
    }
}
(20 marks)\
OR
class RollNoNotInRangeException extends Exception {
    public RollNoNotInRangeException(String message) {
        super(message);
    }
}
class Student {
    private int rollNo;
    private String name;
    private int age;
    private String course;
    public Student(int rollNo, String name, int age, String course) throws RollNoNotInRangeException {
        if (rollNo < 13001 || rollNo > 13080) {
            throw new RollNoNotInRangeException("Rollno is Not Within The Range");
        }
        this.rollNo = rollNo;
        this.name = name;
        this.age = age;
        this.course = course;
    }
    public void display() {
        System.out.println("Roll No: " + rollNo);
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Course: " + course);
    }
}
public class Main {
    public static void main(String[] args) {
        try {
            Student student1 = new Student(13005, "John", 20, "Computer Science");
            student1.display();
            Student student2 = new Student(14000, "Alice", 21, "Mechanical Engineering");
            student2.display();
        } catch (RollNoNotInRangeException e) {
            System.out.println(e.getMessage());
        }
    }
}