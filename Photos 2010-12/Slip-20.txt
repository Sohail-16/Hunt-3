#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
		char *args[]={"./EXEC",NULL};
		execvp(args[0],args);
printf("Ending-----");
	return 0;
}
(10 marks)\

#include <stdio.h>
int main() {
    int frames[10], pages[30], num_frames, num_pages, page_faults = 0;
    int i, j, k = 0, flag;
    int reference_string[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    num_pages = 13; // length of reference string
   printf("Enter number of frames: ");
    scanf("%d", &num_frames);
   for (i = 0; i < num_frames; i++)
        frames[i] = -1;
   printf("\nPage Reference String\tFrames\n");
   for (i = 0; i < num_pages; i++) {
        flag = 0;
        for (j = 0; j < num_frames; j++) {
            if (frames[j] == reference_string[i]) {
                flag = 1;
                break;
            }
        }
       if (flag == 0) {
            frames[k] = reference_string[i];
            k = (k + 1) % num_frames;
            page_faults++;
        }
       printf("%d\t\t\t", reference_string[i]);
        for (j = 0; j < num_frames; j++) {
            if (frames[j] != -1)
                printf("%d ", frames[j]);
            else
                printf("- ");
        }
        printf("\n");
    }
   printf("\nTotal Page Faults = %d\n", page_faults);
    return 0;
}
(20 marks)\
OR
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_PROCESSES 5
typedef struct {
    int pid, arrival_time, burst_time, waiting_time, turnaround_time;
} Process;
int generate_random_burst() {
    return rand() % 10 + 1; // Random burst time between 1 and 10
}
void calculate_times(Process processes[], int n) {
    int completion_time = 0;
    for (int i = 0; i < n; i++) {
        if (completion_time < processes[i].arrival_time)
            completion_time = processes[i].arrival_time;
        completion_time += processes[i].burst_time + 2; 
        processes[i].turnaround_time = completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}
void print_gantt_chart(Process processes[], int n) {
    printf("Gantt Chart:\n|");
    for (int i = 0; i < n; i++)
        printf(" P%d |", processes[i].pid);
    printf("\n");
}
int main() {
    srand(time(NULL));
    Process processes[MAX_PROCESSES];
    int n;
    printf("Enter number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for Process %d: ", processes[i].pid);
        scanf("%d", &processes[i].arrival_time);
        processes[i].burst_time = generate_random_burst();
        printf("Generated CPU burst time for Process %d: %d\n", processes[i].pid, processes[i].burst_time);
    }
    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++)
            if (processes[i].arrival_time > processes[j].arrival_time) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
    calculate_times(processes, n);
    print_gantt_chart(processes, n);
    float total_waiting_time = 0, total_turnaround_time = 0;
    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
    return 0;
}
(20 marks)\