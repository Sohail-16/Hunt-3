#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
		char *args[]={"./EXEC",NULL};
		execvp(args[0],args);
printf("Ending-----");
	return 0;
}
(10 marks)\
#include <stdio.h>
#define MAX_PROCESSES 10
#define MAX_RESOURCES 3
int available[MAX_RESOURCES] = {7, 2, 6}; // Total resources available
int max[MAX_PROCESSES][MAX_RESOURCES];     // Maximum demand of each process
int allocation[MAX_PROCESSES][MAX_RESOURCES]; // Resources allocated to each process
int need[MAX_PROCESSES][MAX_RESOURCES];    // Remaining needs of each process
int num_processes, num_resources = MAX_RESOURCES;
void calculateNeed() {
    for (int i = 0; i < num_processes; i++)
        for (int j = 0; j < num_resources; j++)
            need[i][j] = max[i][j] - allocation[i][j];
}
void displayAvailable() {
    printf("Available resources:\n");
    for (int i = 0; i < num_resources; i++)
        printf("Resource %c: %d\n", 'A' + i, available[i]);
}
void displayMax() {
    printf("Max resources:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < num_resources; j++)
            printf("%d ", max[i][j]);
        printf("\n");
    }
}
void displayAllocation() {
    printf("Allocated resources:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < num_resources; j++)
            printf("%d ", allocation[i][j]);
        printf("\n");
    }
}
void displayNeed() {
    printf("Need resources:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: ", i);
        for (int j = 0; j < num_resources; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }
}
int main() {
    int choice;
   printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
   for (int i = 0; i < num_processes; i++) {
        printf("For Process %d:\n", i);
        printf("Enter Allocation for resources A, B, C: ");
        for (int j = 0; j < num_resources; j++)
            scanf("%d", &allocation[i][j]);
        printf("Enter Max for resources A, B, C: ");
        for (int j = 0; j < num_resources; j++)
            scanf("%d", &max[i][j]);
    }
   calculateNeed();
   do {
        printf("\nMenu:\n");
        printf("1. Display Available\n");
        printf("2. Display Allocation\n");
        printf("3. Display Max\n");
        printf("4. Display Need\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
       switch (choice) {
            case 1:
                displayAvailable();
                break;
            case 2:
                displayAllocation();
                break;
            case 3:
                displayMax();
                break;
            case 4:
                displayNeed();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);
   return 0;
}
(20 marks)\
OR
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_PROCESSES 10
#define IO_WAIT 2  // Fixed I/O waiting time
typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int turnaround_time;
    int waiting_time;
    int complete;
} Process;
Process processes[MAX_PROCESSES];
int num_processes, time_quantum;
void inputProcesses() {
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    for (int i = 0; i < num_processes; i++) {
        processes[i].pid = i + 1;
        printf("Process %d Arrival Time: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Process %d First CPU Burst: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].complete = 0;
    }
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);
}
int allProcessesComplete() {
    for (int i = 0; i < num_processes; i++) {
        if (processes[i].complete == 0) return 0;
    }
    return 1;
}
void roundRobinScheduling() {
    int time = 0, i = 0, idle_time = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;
    int gantt[MAX_PROCESSES * 10], gantt_size = 0;  // Gantt chart tracker
    printf("\nGantt Chart:\n");
    while (!allProcessesComplete()) {
        Process* p = &processes[i];
        if (p->arrival_time <= time && p->remaining_time > 0) {
            gantt[gantt_size++] = p->pid;  // Track process in Gantt chart
            if (p->remaining_time <= time_quantum) {
                time += p->remaining_time;
                p->remaining_time = 0;
                p->complete = 1;
                p->turnaround_time = time - p->arrival_time;
                p->waiting_time = p->turnaround_time - p->burst_time;
                printf("| P%d (%d) ", p->pid, time);  
                srand(time);
                int next_burst = rand() % 10 + 1;  // Random next CPU burst
                p->burst_time += next_burst;
                time += IO_WAIT;  // Fixed I/O wait time
            } else {
                time += time_quantum;
                p->remaining_time -= time_quantum;
                printf("| P%d (%d) ", p->pid, time);  
                time += IO_WAIT;  // Fixed I/O wait time
            }
        } else {
            idle_time++;  // If no process is ready, increase idle time
            time++;
        }
        i = (i + 1) % num_processes;
    }
    printf("|\n");
    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (i = 0; i < num_processes; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / num_processes);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / num_processes);
}
int main() {
    inputProcesses();
    roundRobinScheduling();
    return 0;
}
(20 marks)\
