#include <stdio.h>
int main() {
    int n, m, i, j;
    int alloc[10][10], max[10][10], need[10][10];
    int total_resources[10], avail[10];
   printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);
   for (i = 0; i < m; i++) {
        printf("Enter number of instances of resource %d: ", i + 1);
        scanf("%d", &total_resources[i]);
    }
   printf("Enter Allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
   printf("Enter Max matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
   printf("Enter Available resources:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);
   printf("Need matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
   return 0;
}
(10 marks)\

#include<stdio.h>
int n=16,nf;//n is length of reference string 
int in[20]={12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};//reference string 
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;
void getData()
{
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}
void initialize()
{
    pgfaultcnt=0;
    for(i=0;i<nf;i++)
        p[i]=9999;
}
int isHit(int data)
{
    hit=0;
    for(j=0;j<nf;j++)
    {
        if(p[j]==data)
        {
            hit=1;
            break;
        }
     }
     return hit;
}
int getHitIndex(int data)
{
    int hitind;
    for(k=0;k<nf;k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}
void dispPages() {
    for (k=0;k<nf;k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }
 }
void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}
 void optimal()
{
    initialize();
    int near[50];
    for(i=0; i<n; i++)
    {
         printf("\nFor %d :",in[i]);
        if(isHit(in[i])==0)
        {
            for(j=0;j<nf;j++)
            {
                int pg=p[j];
                int found=0;
                for(k=i;k<n;k++)
                {
                    if(pg==in[k])
                    {
                        near[j]=k;
                        found=1;
                        break;
                    }
                    else
                        found=0;
                }
                if(!found)
                    near[j]=9999;
            }
            int max=-9999;
            int repindex;
            for(j=0;j<nf;j++)
            {
                if(near[j]>max)
                {
                    max=near[j];
                    repindex=j;
                }
            }
            p[repindex]=in[i];
            pgfaultcnt++;
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
int main()
{
            getData();
            optimal();
}
(20 marks)\
OR
#include<stdio.h>
int main()
{
    int pid[15];
    int bt[15];
         int n;
         printf("Enter the number of processes:");
         scanf("%d",&n);
         printf("Enter process id of all the processess:");
         for(int i=0;i<n;i++)
         {
         scanf("%d",&pid[i]);
         }
         printf("Enter burst time of all the processess:");
         for(int i=0;i<n;i++)
         {
         scanf("%d",&bt[i]);
         }
         int i, wt[n];
         wt[0]=0;
         for(i=1;i<n;i++)
         {
         wt[i]= bt[i-1]+wt[i-1];
         }
         printf("Proccess ID    Burst Time      Waiting Time      TurnAround Time\n");
         float twt=0.0;
         float  tat=0.0;
         for(i=0;i<n;i++)
         {
         printf("%d\t\t",pid[i]);
         printf("%d\t\t",bt[i]);
         printf("%d\t\t",wt[i]);
         printf("%d\t\t",bt[i]+wt[i]);
         printf("\n");
         twt +=wt[i];
         tat +=(wt[i]+bt[i]);
        }
        float att,awt;
        awt =twt/n;
        att =tat/n;
        printf("Avg. waiting time = %f\n",awt);
        printf("Avg. turnaround time = %f",att);
        }
(20 marks)\