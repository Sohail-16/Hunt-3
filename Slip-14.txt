#include <stdio.h>
#include <time.h>
int main() {
    clock_t start = clock();  // Start time
   for (long i = 0; i < 100000000; i++);
   clock_t end = clock();    // End time
   printf("Execution time: %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
   return 0;
}
(10 marks)\

#include<stdio.h>
int n=12,f;//n is length of reference string
int in[20]={0, 2, 1, 6, 4, 0, 1, 0, 3, 1, 2, 1};//Reference String
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;
void getData()
{
	printf("\nEnter no of frames:");
	scanf("%d",&f);
}
void initialize()
{
	pgfaultcnt=0;
	for(i=0;i<f;i++)
		p[i]=9999;
}
int isHit(int data)
{
	hit=0;
	for(j=0;j<f;j++)
	{
		if(p[j]==data)
		{
			hit=1;
			break;
		}
	}
	return hit;
}
int getHitIndex(int data)
{
	int hitind;
	for(k=0;k<f;k++)
	{
		if(p[k]==data)
		{
			hitind=k;
			break;
		}
	}
	return hitind;
}
void dispPages()
{
	for (k=0;k<f;k++)
	{
		if(p[k]!=9999)
			printf(" %d",p[k]);
	}
}
void dispPgFaultCnt()
{
	printf("\nTotal no of page faults:%d",pgfaultcnt);
}
void fifo()
{
	initialize();
	for(i=0; i<n; i++)
	{
		printf("\nFor %d :",in[i]);
		if(isHit(in[i])==0)
		{
			for(k=0;k<f-1;k++)
			p[k]=p[k+1];
		p[k]=in[i];
		pgfaultcnt++;
		dispPages();
	}
	else
		printf("No page fault");
	}
	dispPgFaultCnt();
}
int main()
{
        getData();
        fifo();
}
(20 marks)\
OR
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid;         // Process ID
    int arrival;     // Arrival time
    int burst;       // Burst time
    int turnaround;  // Turnaround time
    int waiting;     // Waiting time
} Process;

void calculateTimes(Process proc[], int n) {
    int time = 0; // Current time
    int completed = 0; // Count of completed processes
    int gantt[MAX_PROCESSES]; // Gantt chart
    int ganttIndex = 0;

    while (completed < n) {
        int idx = -1; // Index of the shortest job
        int minBurst = 999; // Initialize to a large number

        // Find the process with the shortest burst time
        for (int i = 0; i < n; i++) {
            if (proc[i].arrival <= time && proc[i].burst < minBurst) {
                minBurst = proc[i].burst;
                idx = i;
            }
        }

        if (idx != -1) {
            gantt[ganttIndex++] = proc[idx].pid; // Add process to Gantt chart
            time += proc[idx].burst + 2; // Increment time with burst time and I/O waiting time
            proc[idx].turnaround = time - proc[idx].arrival; // Calculate turnaround time
            proc[idx].waiting = proc[idx].turnaround - proc[idx].burst; // Calculate waiting time
            proc[idx].burst = rand() % 10 + 1; // Generate new CPU burst
            completed++; // Increment completed processes
        } else {
            time++; // If no process is ready, increment time
        }
    }

    // Print Gantt chart
    printf("Gantt Chart:\n");
    for (int i = 0; i < ganttIndex; i++) {
        printf("P%d ", gantt[i]);
    }
    printf("\n");
}

void printTimes(Process proc[], int n) {
    printf("\nProcess\tTurnaround Time\tWaiting Time\n");
    float totalTurnaround = 0, totalWaiting = 0;

    for (int i = 0; i < n; i++) {
        totalTurnaround += proc[i].turnaround;
        totalWaiting += proc[i].waiting;
        printf("P%d\t%d\t\t%d\n", proc[i].pid, proc[i].turnaround, proc[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", totalTurnaround / n);
    printf("Average Waiting Time: %.2f\n", totalWaiting / n);
}

int main() {
    srand(time(NULL)); // Seed random number generator

    Process proc[MAX_PROCESSES];
    int n;

    // Input number of processes
    printf("Enter number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);

    // Input arrival times and first CPU bursts
    for (int i = 0; i < n; i++) {
        proc[i].pid = i;
        printf("Enter arrival time and first CPU burst for P%d: ", i);
        scanf("%d %d", &proc[i].arrival, &proc[i].burst);
    }

    // Calculate turnaround and waiting times
    calculateTimes(proc, n);
    printTimes(proc, n);

    return 0;
}
(20 marks)\